{"version":3,"sources":["components/board.js","App.js","serviceWorker.js","index.js"],"names":["Board","numberOfRows","numberOfColumns","numberOfBombs","Object","classCallCheck","this","_numberOfRows","_numberOfColumns","_numberOfBombs","_numberOfTiles","_playerBoard","generatePlayerBoard","_bombBoard","generateBombBoard","rowIndex","columnIndex","e","flipTile","console","log","playerBoard","$","currentTarget","css","background","color","text","show","border","getNumberOfNeighborBombs","_this","length","forEach","offset","neighborRowIndex","neighborColumnIndex","board","i","row","push","numberOfBombsPlaced","randomRowIndex","Math","floor","random","randomColumnIndex","App","props","possibleConstructorReturn","getPrototypeOf","call","state","rows","columns","bombs","Game","getTileIndexes","bind","assertThisInitialized","startGame","restart","newGame","column","index","parent","playMove","val","Number","setState","hide","spanKey","divKey","span","react_default","a","createElement","onClick","key","className","_this2","printBoard","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aedceb4e.chunk.js","sourcesContent":["import $ from \"jquery\";\r\n\r\n\r\nclass Board {\r\n  constructor(numberOfRows,numberOfColumns,numberOfBombs){\r\n    this._numberOfRows = numberOfRows;\r\n    this._numberOfColumns = numberOfColumns;\r\n    this._numberOfBombs = numberOfBombs;\r\n    this._numberOfTiles = numberOfRows * numberOfColumns;\r\n    this._playerBoard = Board.generatePlayerBoard(numberOfRows, numberOfColumns);\r\n    this._bombBoard = Board.generateBombBoard(numberOfRows, numberOfColumns, numberOfBombs);\r\n}\r\n\r\n\r\nplayMove(rowIndex,columnIndex,e){\r\n\r\n   this.flipTile(rowIndex,columnIndex)\r\n   console.log(this._numberOfBombs)\r\n   console.log(this._numberOfTiles)\r\n      if(this.playerBoard[rowIndex][columnIndex] === 'B'){\r\n         $(e.currentTarget).css({background:\"red\",color:\"white\"}).text(\"B\")\r\n         $(\".status\").show().text(\"NO!!! YOU LOST!\")\r\n\r\n      }else if(this._numberOfTiles == this._numberOfBombs){\r\n         $(e.currentTarget).css({background:\"white\",border:\"1px solid black\"}).text(this.getNumberOfNeighborBombs(rowIndex,columnIndex))\r\n         $(\".status\").show().text(\"YOU WON!!\")\r\n      }else  $(e.currentTarget).css({background:\"white\",border:\"1px solid black\"}).text(this.getNumberOfNeighborBombs(rowIndex,columnIndex))\r\n }\r\n\r\n\r\n\r\n\r\n flipTile(rowIndex,columnIndex){\r\n   if(this._bombBoard[rowIndex][columnIndex] === 'B'){\r\n      return this._playerBoard[rowIndex][columnIndex] = 'B'\r\n  } else this._playerBoard[rowIndex][columnIndex] = this.getNumberOfNeighborBombs(rowIndex,columnIndex)\r\n      return this._numberOfTiles--\r\n  }\r\n\r\n\r\nget playerBoard() {\r\n  return this._playerBoard\r\n}\r\n\r\n\r\ngetNumberOfNeighborBombs(rowIndex,columnIndex){\r\nlet neighborOffsets = [\r\n[-1,-1], [-1,0], [-1,1], [0,-1], [0,1], [1,-1], [1,0], [1,1]]\r\n   const numberOfRows = this._bombBoard.length\r\n   const numberOfColumns = this._bombBoard[0].length\r\n   let numberOfBombs = 0;\r\nneighborOffsets.forEach(offset => {\r\n   const neighborRowIndex = rowIndex + offset[0];\r\n   const neighborColumnIndex = columnIndex + offset[1];\r\n   if(neighborRowIndex >= 0 && neighborRowIndex < numberOfRows\r\n      && neighborColumnIndex >= 0 && neighborColumnIndex < numberOfColumns ){\r\n         if(this._bombBoard[neighborRowIndex][neighborColumnIndex] === \"B\") {\r\n             numberOfBombs +=1\r\n           }\r\n}})\r\n return numberOfBombs;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nstatic generatePlayerBoard(numberOfRows,numberOfColumns){\r\n   const board = []\r\n   for(let i = 0; i < numberOfRows; i++ ){\r\n       const row = []\r\n     for(let i = 0; i < numberOfColumns; i++ ){\r\n         row.push(' ')\r\n        }\r\n       board.push(row)\r\n   }\r\n   return board\r\n }\r\n\r\n\r\nstatic generateBombBoard(numberOfRows, numberOfColumns, numberOfBombs){\r\nlet board = []\r\nfor(let i = 0; i < numberOfRows; i++ ){\r\n   const row = []\r\n   for(let i = 0; i < numberOfColumns; i++ ){\r\n     row.push(' ')\r\n   }\r\n   board.push(row)\r\n}\r\n\r\nlet numberOfBombsPlaced = 0;\r\n\r\nwhile (numberOfBombsPlaced < numberOfBombs) {\r\n   const randomRowIndex = Math.floor(Math.random() * numberOfRows);\r\n   const randomColumnIndex = Math.floor(Math.random() * numberOfColumns);\r\n   if(board[randomRowIndex][randomColumnIndex] !== 'B'){\r\n      board[randomRowIndex][randomColumnIndex] = 'B';\r\n      numberOfBombsPlaced +=1\r\n   }}\r\nreturn board\r\n}\r\n\r\n  }\r\n\r\nexport default Board;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport Board from \"./components/board\"\nimport $ from \"jquery\";\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      rows:0,\n      columns:0,\n      bombs:0\n    }\n\n    this.Game = new Board(this.state.rows,this.state.columns,this.state.bombs);\n    this.getTileIndexes = this.getTileIndexes.bind(this)\n    this.startGame = this.startGame.bind(this)\n    this.restart = this.restart.bind(this)\n    this.newGame = this.newGame.bind(this)\n  }\n\n  getTileIndexes(e){\n    let column = $(e.currentTarget).index()\n    let row = $(e.currentTarget).parent().index()\n\n    this.Game.playMove(row,column,e)\n  \n\n    }\n\n    startGame(){\n    let rows = $(\".rowInput\").val()\n    let columns = $(\".columnInput\").val()\n    let bombs =  $(\".bombInput\").val()\n    if(!Number(rows)|| !Number(columns) || !Number(bombs)){\n      return $(\".error\").show().text(\"can input only numbers!\")\n    }\n\n    else if(rows > 10){\n      return $(\".error\").show().text(\"Rows cannot be more than 10\")\n    }\n    else if(columns > 15){\n      return $(\".error\").show().text(\"Columns cannot be more than 15\")\n    }\n\n    else if((rows * columns) <= bombs){\n      return $(\".error\").show().text(\"reduce amount of bombs!\")\n    }\n    else this.setState({rows:rows})\n    this.setState({columns:columns})\n    this.setState({bombs:bombs})\n    $(\".tile\").css({background:\"black\",color:\"black\"})\n\n    this.Game = new Board(rows,columns,bombs);\n    $(\".intro\").hide()\n    $(\".error\").hide()\n    $(\".restart\").show()\n    $(\".newGame\").show()\n\n    }\n\n    restart(){\n      this.Game = new Board(this.state.rows,this.state.columns,this.state.bombs);\n      $(\".tile\").css({background:\"black\",color:\"black\",border:\"1px solid white\"})\n      $(\".status\").hide()\n\n    }\n\n    newGame(){\n      this.setState({rows:0})\n      this.setState({columns:0})\n      this.setState({bombs:0})\n      $(\".intro\").show()\n      $(\".status\").hide()\n      $(\".restart\").hide()\n      $(\".newGame\").hide()\n    }\n\n  printBoard(numberOfRows,numberOfColumns){\n    let board = []\n    let spanKey = 0;\n    let divKey = 1000;\n        for(let i = 0; i < numberOfRows; i +=1 ){\n            let row = []\n              for(let i = 0; i < numberOfColumns; i+=1 ){\n                spanKey +=1\n             let span = <span onClick={this.getTileIndexes}  key = {spanKey} className=\"tile\"></span>\n                row.push(span)\n           }\n           divKey +=1\n        board.push(<div className = \"row\" key= {divKey }>{row}</div>)\n        }\n        return board\n    }\n\n    render() {\nconst print = () => {\n  if(this.state.rows === 0 || this.state.columns === 0 || this.state.bombs === 0){\n    return false\n  }else return this.printBoard(this.state.rows,this.state.columns)\n}\n\n      return (\n        <div className = \"wrapper\">\n        <div className=\"intro\">\n          <h1>Lets start The Game!</h1>\n          <p>Create you board...</p>\n          <p>Number of Rows</p>\n          <input className=\"rowInput\"></input>\n          <p>Number of Columns</p>\n          <input className=\"columnInput\"></input>\n          <p>Number of Bombs</p>\n          <input className=\"bombInput\"></input>\n          <p className=\"error\"></p>\n          <button className=\"startButton\" onClick = {this.startGame}>Start the Game</button>\n        </div>\n        <div className= \"board\">\n        {print()}\n        <p className=\"status\">You LOST!</p>\n        <button className=\"restart\" onClick = {this.restart}>Restart</button>\n        <button className=\"newGame\" onClick = {this.newGame}>NEW GAME</button>\n\n        </div>\n        </div>\n      );\n    }\n  }\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}