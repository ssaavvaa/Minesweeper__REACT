{"version":3,"sources":["components/board.js","App.js","serviceWorker.js","index.js"],"names":["Board","numberOfRows","numberOfColumns","numberOfBombs","Object","classCallCheck","this","_numberOfRows","_numberOfColumns","_numberOfBombs","_numberOfTiles","_playerBoard","generatePlayerBoard","_bombBoard","generateBombBoard","i","length","z","span","$","children","textContent","style","background","color","number","getNumberOfNeighborBombs","border","rowIndex","columnIndex","_this","forEach","offset","neighborRowIndex","neighborColumnIndex","board","row","push","numberOfBombsPlaced","randomRowIndex","Math","floor","random","randomColumnIndex","App","props","possibleConstructorReturn","getPrototypeOf","call","state","rows","columns","bombs","currentGame","Game","getTileIndexes","bind","assertThisInitialized","startGame","restart","newGame","e","column","currentTarget","index","parent","text","flipTile","playerBoard","css","show","finishGame","setState","each","val","Number","concat","hide","fadeIn","slideDown","on","spanKey","divKey","react_default","a","createElement","onClick","key","className","_this2","printBoard","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2fd7e4b.chunk.js","sourcesContent":["import $ from \"jquery\";\r\n\r\n\r\nclass Board {\r\n  constructor(numberOfRows,numberOfColumns,numberOfBombs){\r\n    this._numberOfRows = numberOfRows;\r\n    this._numberOfColumns = numberOfColumns;\r\n    this._numberOfBombs = numberOfBombs;\r\n    this._numberOfTiles = numberOfRows * numberOfColumns;\r\n    this._playerBoard = Board.generatePlayerBoard(numberOfRows, numberOfColumns);\r\n    this._bombBoard = Board.generateBombBoard(numberOfRows, numberOfColumns, numberOfBombs);\r\n}\r\n\r\nfinishGame(){\r\n\r\n\r\n\r\n   for(let i = 0; i < this._playerBoard.length; i +=1){\r\n\r\n      for(let z = 0; z < this._playerBoard[0].length; z +=1){\r\n\r\n         if(this._bombBoard[i][z] == \"B\"){\r\n          \r\n         let span = $(\".board\").children()[i].children[z]\r\n         span.textContent = \"B\"\r\n         span.style.background = \"red\"\r\n         span.style.color = \"white\"\r\n      \r\n      }else if(this._bombBoard[i][z] !== \"B\"){ \r\n       \r\n      let span = $(\".board\").children()[i].children[z]\r\n      let number = this.getNumberOfNeighborBombs(i,z)\r\n         span.textContent = number\r\n         span.style.background = \"white\"\r\n         span.style.color = \"black\"\r\n         span.style.border = \"1px solid black\"\r\n  \r\n    \r\n   }\r\n\r\n}\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n flipTile(rowIndex,columnIndex){\r\n   if(this._bombBoard[rowIndex][columnIndex] === 'B'){\r\n      return this._playerBoard[rowIndex][columnIndex] = 'B'\r\n  } else this._playerBoard[rowIndex][columnIndex] = this.getNumberOfNeighborBombs(rowIndex,columnIndex)\r\n      return this._numberOfTiles--\r\n  }\r\n\r\n\r\nget playerBoard() {\r\n  return this._playerBoard\r\n}\r\n\r\n\r\ngetNumberOfNeighborBombs(rowIndex,columnIndex){\r\nlet neighborOffsets = [\r\n[-1,-1], [-1,0], [-1,1], [0,-1], [0,1], [1,-1], [1,0], [1,1]]\r\n   const numberOfRows = this._bombBoard.length\r\n   const numberOfColumns = this._bombBoard[0].length\r\n   let numberOfBombs = 0;\r\nneighborOffsets.forEach(offset => {\r\n   const neighborRowIndex = rowIndex + offset[0];\r\n   const neighborColumnIndex = columnIndex + offset[1];\r\n   if(neighborRowIndex >= 0 && neighborRowIndex < numberOfRows\r\n      && neighborColumnIndex >= 0 && neighborColumnIndex < numberOfColumns ){\r\n         if(this._bombBoard[neighborRowIndex][neighborColumnIndex] === \"B\") {\r\n             numberOfBombs +=1\r\n           }\r\n}})\r\n return numberOfBombs;\r\n}\r\n\r\n\r\n\r\nstatic generatePlayerBoard(numberOfRows,numberOfColumns){\r\n   const board = []\r\n   for(let i = 0; i < numberOfRows; i++ ){\r\n       const row = []\r\n     for(let i = 0; i < numberOfColumns; i++ ){\r\n         row.push(' ')\r\n        }\r\n       board.push(row)\r\n   }\r\n   return board\r\n }\r\n\r\n\r\nstatic generateBombBoard(numberOfRows, numberOfColumns, numberOfBombs){\r\nlet board = []\r\nfor(let i = 0; i < numberOfRows; i++ ){\r\n   const row = []\r\n   for(let i = 0; i < numberOfColumns; i++ ){\r\n     row.push(' ')\r\n   }\r\n   board.push(row)\r\n}\r\n\r\nlet numberOfBombsPlaced = 0;\r\n\r\nwhile (numberOfBombsPlaced < numberOfBombs) {\r\n   const randomRowIndex = Math.floor(Math.random() * numberOfRows);\r\n   const randomColumnIndex = Math.floor(Math.random() * numberOfColumns);\r\n   if(board[randomRowIndex][randomColumnIndex] !== 'B'){\r\n      board[randomRowIndex][randomColumnIndex] = 'B';\r\n      numberOfBombsPlaced +=1\r\n   }}\r\nreturn board\r\n}\r\n\r\n  }\r\n\r\nexport default Board;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport Board from \"./components/board\"\nimport $ from \"jquery\";\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      rows:0,\n      columns:0,\n      bombs:0,\n      currentGame:true\n    }\n\n    this.Game = new Board(this.state.rows,this.state.columns,this.state.bombs);\n    this.getTileIndexes = this.getTileIndexes.bind(this)\n    this.startGame = this.startGame.bind(this)\n    this.restart = this.restart.bind(this)\n    this.newGame = this.newGame.bind(this)\n  }\n\n\n  getTileIndexes(e){\n\n    if(this.state.currentGame === true){\n\n    let column = $(e.currentTarget).index()\n    let row = $(e.currentTarget).parent().index()\n    if(!$(e.currentTarget).text()){\n    this.Game.flipTile(row,column)\n    if(this.Game.playerBoard[row][column] === 'B'){\n\n       $(e.currentTarget).css({background:\"red\",color:\"white\"}).text(\"B\")\n       $(\".status\").show().text(\"BOOOM!!! YOU LOST!\")\n       this.Game.finishGame()\n\n    }else if(this.Game._numberOfTiles == this.Game._numberOfBombs){\n      this.setState({currentGame:false})\n       $(e.currentTarget).css({background:\"white\",border:\"1px solid black\"}).text(this.Game.getNumberOfNeighborBombs(row,column))\n       $(\".status\").show().text(\"Congrats! You are Winner!!\")\n          $( \".tile\" ).each(function() {\n           if(!$(this).text()){\n            $(this).css({background:\"blue\",color:\"white\"}).text(\"B\")\n           }\n          });\n\n    }else  $(e.currentTarget).css({background:\"white\",border:\"1px solid black\"}).text(this.Game.getNumberOfNeighborBombs(row,column))\n  }else return false\n    }\n    }\n\n    startGame(){\n      this.setState({currentGame:true})\n    let rows = $(\".rowInput\").val()\n    let columns = $(\".columnInput\").val()\n    let bombs =  $(\".bombInput\").val()\n\n     if(rows === \"\" || columns === \"\" || bombs === \"\"){\n      return $(\".error\").show().text(\"cannot leave empty fields!\")\n    }\n    if(!Number(rows)|| !Number(columns) || !Number(bombs)){\n      return $(\".error\").show().text(\"can input only numbers!\")\n    }\n\n    else if(rows > 10){\n      return $(\".error\").show().text(\"Rows cannot be more than 10\")\n    }\n    else if(columns > 15){\n      return $(\".error\").show().text(\"Columns cannot be more than 15\")\n    }\n\n    else if((rows * columns) <= bombs){\n      return $(\".error\").show().text(`Bombs cannot be more than ${(rows * columns)-1}`)\n    }\n    else this.setState({rows:rows})\n    this.setState({columns:columns})\n    this.setState({bombs:bombs})\n    $(\".tile\").text(null)\n    $(\".tile\").css({background:\"black\",color:\"black\"})\n\n    this.Game = new Board(rows,columns,bombs);\n\n    $(\".intro\").hide()\n    $(\".error\").hide()\n    $(\".restart\").show()\n    $(\".newGame\").show()\n    $(\".board\").fadeIn(600)\n    }\n\n    restart(){\n      this.setState({currentGame:true})\n      this.Game = new Board(this.state.rows,this.state.columns,this.state.bombs);\n      $(\".tile\").text(null)\n      $(\".tile\").css({background:\"black\",color:\"black\",border:\"1px solid white\"})\n      $(\".status\").hide()\n      $(\".board\").hide()\n      $(\".board\").slideDown()\n\n    }\n\n    newGame(){\n      this.setState({currentGame:true})\n      this.setState({rows:0,columns:0,bombs:0})\n      $(\".tile\").text(null)\n      $(\".intro\").show()\n      $(\".status\").hide()\n      $(\".restart\").hide()\n      $(\".newGame\").hide()\n      $(\".board\").hide()\n      $(\".tile\").on(\"click\",function(){\n        return true\n     })\n    }\n\n  printBoard(numberOfRows,numberOfColumns){\n    let board = []\n    let spanKey = 0;\n    let divKey = 1000;\n        for(let i = 0; i < numberOfRows; i +=1 ){\n            let row = []\n              for(let i = 0; i < numberOfColumns; i+=1 ){\n                spanKey +=1\n             let span = <span onClick={this.getTileIndexes}  key = {spanKey} className=\"tile\"></span>\n                row.push(span)\n           }\n           divKey +=1\n        board.push(<div className = \"row\" key= {divKey }>{row}</div>)\n        }\n        return board\n    }\n\n    render() {\n\n\n\nconst print = () => {\n  if(this.state.rows === 0 || this.state.columns === 0 || this.state.bombs === 0){\n    return false\n  }else return this.printBoard(this.state.rows,this.state.columns)\n}\n\n\n      return (\n        <div className = \"wrapper\">\n        <div className=\"intro\">\n          <h1>MINESWEEPER</h1>\n          <h2>Lets start The Game!</h2>\n          <p>Create you board...</p>\n          <p>Number of Rows <span className = \"helper\">(Max 10)</span></p>\n          <input className=\"rowInput\"></input>\n          <p>Number of Columns <span className = \"helper\">(Max 15)</span></p>\n          <input className=\"columnInput\"></input>\n          <p>Number of Bombs</p>\n          <input className=\"bombInput\"></input>\n          <p className=\"error\"></p>\n          <button className=\"startButton\" onClick = {this.startGame}>Start the Game</button>\n        </div>\n        <div className= \"board\">\n        {print()}\n        </div>\n        <p className=\"status\">You LOST!</p>\n        <button className=\"restart\" onClick = {this.restart}>Restart</button>\n        <button className=\"newGame\" onClick = {this.newGame}>NEW GAME</button>\n\n       \n        </div>\n      );\n    }\n  }\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}